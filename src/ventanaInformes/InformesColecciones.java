/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ventanaInformes;

import clases.Coleccion;
import clases.Conexion;
import configuracion.ConfiguracionesBD;
import java.awt.Image;
import java.io.IOException;
import java.io.InputStream;
import java.net.URISyntaxException;
import java.net.URL;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;


/**
 *
 * @author Dani
 */
public class InformesColecciones extends javax.swing.JInternalFrame {

    /**
     * Creates new form InformesColecciones
     */
    public InformesColecciones() {
        initComponents();
        cmbColecciones.setModel(modeloColecciones);
        rellenarColecciones();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        btnInformePredefinido = new javax.swing.JButton();
        btnInformePersonalizado = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cmbColecciones = new javax.swing.JComboBox<>();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Informes Colecciones");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        btnInformePredefinido.setText("Generar Informe predefinido");
        btnInformePredefinido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInformePredefinidoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(btnInformePredefinido, gridBagConstraints);

        btnInformePersonalizado.setText("Generar informe personalizado");
        btnInformePersonalizado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInformePersonalizadoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(btnInformePersonalizado, gridBagConstraints);

        jLabel1.setText("Colección");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jLabel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(cmbColecciones, gridBagConstraints);

        setBounds(0, 0, 695, 131);
    }// </editor-fold>//GEN-END:initComponents

    private void btnInformePersonalizadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInformePersonalizadoActionPerformed
        //validacion
        if(cmbColecciones.getSelectedIndex() == -1){
            JOptionPane.showMessageDialog(this, "Selecciona una colección", "Error", 
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        Coleccion coleccion = (Coleccion) cmbColecciones.getSelectedItem();
        //generar informe personalizado
        URL url = null;        
        HashMap datos = new HashMap();
        // genera informe de colecciones de BD
        if(!ConfiguracionesBD.SISTEMA_EN_PRODUCCION){
            System.out.println("Desarrollo");
            url = this.getClass().getResource("/informes");
            String directorioInformes = "";

            try {
                directorioInformes = url.toURI().getPath();
                String informe = directorioInformes.concat("/informePersonalizadoColecciones.jrxml");
                JasperReport jasperReport = JasperCompileManager.compileReport(informe);
                datos.put("IdColeccion", coleccion.getId());
                JasperPrint impresion = JasperFillManager.fillReport(jasperReport, datos, Conexion.getConexion());
                if(impresion.getPages().isEmpty()){
                    JOptionPane.showMessageDialog(this, "No hay datos que mostrar");
                    return;
                }
                JasperViewer.viewReport(impresion, false);
            } catch (URISyntaxException ex) {
                System.out.println("Error de uri en informe colecciones!!");
            } catch (JRException ex) {
                //System.out.println("Error llenando el informe cliente!!");
                ex.printStackTrace();
            } 
        }else{
            System.out.println("Producción");
            try {
                InputStream informe = this.getClass().getResourceAsStream
                ("/informes/informePersonalizadoColecciones.jrxml");
                JasperReport jasperReport = JasperCompileManager.compileReport(informe);
                datos.put("IdColeccion", coleccion.getId());
                JasperPrint impresion = JasperFillManager.fillReport(jasperReport, datos, Conexion.getConexion());
                if(impresion.getPages().isEmpty()){
                    JOptionPane.showMessageDialog(this, "No hay datos que mostrar");
                    return;
                }
                JasperViewer.viewReport(impresion, false);
            } catch (JRException ex) {
                Logger.getLogger(InformesColecciones.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
    }//GEN-LAST:event_btnInformePersonalizadoActionPerformed

    /**
     * rellena el combobox de colecciones
     */
    public static void rellenarColecciones(){
        modeloColecciones.removeAllElements();
        try {
            Statement stm = Conexion.getConexion().createStatement();
            ResultSet rs = stm.executeQuery("select id, nombre, sinopsis from "
                    + "colecciones order by nombre");
            while(rs.next()){
                Coleccion coleccion = new Coleccion(rs.getInt(1), rs.getString(2),
                rs.getString(3));
                modeloColecciones.addElement(coleccion);
            }
        } catch (SQLException e) {
            System.out.println(""+e.getErrorCode());
            e.printStackTrace();
        }catch(Exception ex){
            System.out.println(ex.getMessage());
        }
    }
    
    private void btnInformePredefinidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInformePredefinidoActionPerformed
        URL url = null;        
        HashMap datos = new HashMap();
        // genera informe de clientes de BD
        if(!ConfiguracionesBD.SISTEMA_EN_PRODUCCION){
            System.out.println("Desarrollo");
            url = this.getClass().getResource("/informes");
            String directorioInformes = "";
            try {
                directorioInformes = url.toURI().getPath();
                InputStream is = this.getClass().getResourceAsStream("/imagenes/libreria.jpeg");
                String informe = directorioInformes.concat("/informeColecciones.jrxml");
                JasperReport jasperReport = JasperCompileManager.compileReport(informe);
                String subinforme = directorioInformes.concat("/subInformeColecciones.jrxml");
                JasperReport jasperReport2 = JasperCompileManager.compileReport(subinforme);
                Image imagen = ImageIO.read(is);
                datos.put("Imagen", imagen);
                datos.put("SubInformeColecciones", jasperReport2);
                JasperPrint impresion = JasperFillManager.fillReport(jasperReport, datos, Conexion.getConexion());
                if(impresion.getPages().isEmpty()){
                    JOptionPane.showMessageDialog(this, "No hay datos que mostrar");
                    return;
                }
                JasperViewer.viewReport(impresion, false);
            } catch (URISyntaxException ex) {
                System.out.println("Error de uri en informe colecciones!!");
            } catch (JRException ex) {
                System.out.println("Error llenando el informe colecciones!!");
            } catch (IOException ex) {
                System.out.println("Error cargando imagen en informe colecciones!!");
            }   
        }else{
            System.out.println("Producción");
            try {
                InputStream informe = this.getClass().getResourceAsStream
                ("/informes/informeColecciones.jrxml");
                JasperReport jasperReport = JasperCompileManager.compileReport(informe);
                InputStream is = this.getClass().getResourceAsStream("/imagenes/libreria.jpeg");
                InputStream subinforme = this.getClass().getResourceAsStream("/informes/subInformeColecciones.jrxml");
                JasperReport jasperReport2 = JasperCompileManager.compileReport(subinforme);
                Image imagen = ImageIO.read(is);
                datos.put("SubInformeColecciones", jasperReport2);
                datos.put("Imagen", imagen);
                JasperPrint impresion = JasperFillManager.fillReport(jasperReport, datos, Conexion.getConexion());
                if(impresion.getPages().isEmpty()){
                    JOptionPane.showMessageDialog(this, "No hay datos que mostrar");
                    return;
                }
                JasperViewer.viewReport(impresion, false);
            } catch (JRException ex) {
                System.out.println(""+ex.getMessage());
            } catch (IOException ex) {
                System.out.println("Error cargando imagen en informe clientes!!");
            }
            
        }
    }//GEN-LAST:event_btnInformePredefinidoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnInformePersonalizado;
    private javax.swing.JButton btnInformePredefinido;
    private javax.swing.JComboBox<Coleccion> cmbColecciones;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
    private static DefaultComboBoxModel<Coleccion> modeloColecciones = new DefaultComboBoxModel<>();
}
