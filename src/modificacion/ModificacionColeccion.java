/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package modificacion;

import alta.AltaComic;
import baja.BajaColeccion;
import baja.BajaComic;
import clases.Coleccion;
import clases.Conexion;
import clases.DocumentoLongitudRestringida;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import ventanaInformes.InformesColecciones;
import ventanaInformes.InformesComics;

/**
 *
 * @author Dani
 */
public class ModificacionColeccion extends javax.swing.JInternalFrame {

    /**
     * Creates new form ModificacionColeccion
     */
    public ModificacionColeccion() {
        initComponents();
        txtNombre.setDocument(new DocumentoLongitudRestringida(50));
        txtaSinopsis.setDocument(new DocumentoLongitudRestringida(100));
        cmbColecciones.setModel(modeloColecciones);
        rellenarColecciones();
        if(cmbColecciones.getSelectedIndex() != -1){
            Coleccion coleccion = (Coleccion) cmbColecciones.getSelectedItem();
            colocarCampos(coleccion);
        }
    }
    /**
     * rellena el combobox de colecciones
     */
    public static void rellenarColecciones(){
        modeloColecciones.removeAllElements();
        try {
            Statement stm = Conexion.getConexion().createStatement();
            ResultSet rs = stm.executeQuery("select id, nombre, sinopsis from "
                    + "colecciones order by nombre");
            while(rs.next()){
                Coleccion coleccion = new Coleccion(rs.getInt(1), rs.getString(2),
                rs.getString(3));
                modeloColecciones.addElement(coleccion);
            }
        } catch (SQLException e) {
            System.out.println(""+e.getErrorCode());
            e.printStackTrace();
        }catch(Exception ex){
            System.out.println(ex.getMessage());
        }
    }
    /**
     * coloca los campos de coleccion en el formulario
     * @param coleccion 
     */
    private void colocarCampos(Coleccion coleccion){
        txtNombre.setText(coleccion.getNombre());
        txtaSinopsis.setText(coleccion.getSinopsis());
    }
    /**
     * limpia los campos del formulario
     */
    private void limpiar(){
        txtNombre.setText("");
        txtaSinopsis.setText("");
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        cmbColecciones = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtaSinopsis = new javax.swing.JTextArea();
        btnAceptar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Modificación Colección");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Colección : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jLabel1, gridBagConstraints);

        cmbColecciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbColeccionesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(cmbColecciones, gridBagConstraints);

        jLabel2.setText("Nombre");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jLabel2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(txtNombre, gridBagConstraints);

        jLabel3.setText("Sinopsis");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jLabel3, gridBagConstraints);

        txtaSinopsis.setColumns(20);
        txtaSinopsis.setRows(5);
        jScrollPane1.setViewportView(txtaSinopsis);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        btnAceptar.setText("Aceptar");
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(btnAceptar, gridBagConstraints);

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(btnCancelar, gridBagConstraints);

        setBounds(0, 0, 441, 295);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
       //validacion campos
        if(cmbColecciones.getSelectedIndex() == -1){
            JOptionPane.showMessageDialog(this, "Por favor, selecciona una "
                    + "colección", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }if(txtNombre.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(this, "Falta nombre", "Error", 
                    JOptionPane.ERROR_MESSAGE);
            return;
        }if(txtaSinopsis.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(this, "Falta sinopsis", "Error", 
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        int posSeleccionada = cmbColecciones.getSelectedIndex();
        //modificar cliente de BD
        try {  
            Coleccion coleccion = (Coleccion) cmbColecciones.getSelectedItem();
            String nombre = txtNombre.getText().trim();
            String sinopsis = txtaSinopsis.getText().trim();
            Statement stm = Conexion.getConexion().createStatement();
            String consulta = "update colecciones set nombre = '"+ nombre
                    + "', sinopsis = '" + sinopsis + "' " 
                    + "where id ="+ coleccion.getId();
            System.out.println(""+consulta);
            stm.executeUpdate(consulta);
        } catch (SQLException e) {
            System.out.println(""+e.getErrorCode());
            e.printStackTrace();
        }
        limpiar();
        actualizarColeccion(posSeleccionada);
        //rellenamos el resto de componentes de las ventanas
        AltaComic.rellenarColecciones();
        BajaColeccion.rellenarColecciones();
        BajaComic.rellenarComics();
        ModificacionColeccion.rellenarColecciones();
        ModificacionComic.rellenarColecciones();
        ModificacionComic.rellenarComics();
        InformesComics.rellenarComics();
        InformesColecciones.rellenarColecciones();
        JOptionPane.showMessageDialog(this, "Colección modificada correctamente", 
                "Éxito", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_btnAceptarActionPerformed

    private void cmbColeccionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbColeccionesActionPerformed
        if(cmbColecciones.getSelectedIndex() != -1){
            Coleccion coleccion = (Coleccion) cmbColecciones.getSelectedItem();
            colocarCampos(coleccion);
        }
    }//GEN-LAST:event_cmbColeccionesActionPerformed
    /**
     * actualiza los datos del formulario
     * @param posSeleccionada 
     */
    private void actualizarColeccion(int posSeleccionada){
        try {
            int id = modeloColecciones.getElementAt
                    (posSeleccionada).getId();
            Statement stm = Conexion.getConexion().createStatement();
            String consulta = "select nombre, sinopsis "
                    + "from colecciones where id=" + id;
            ResultSet rs = stm.executeQuery(consulta);
            while(rs.next()){
                Coleccion coleccion = new Coleccion(id, rs.getString(1), rs.getString(2));
                modeloColecciones.removeElementAt(posSeleccionada);
                modeloColecciones.insertElementAt(coleccion, posSeleccionada);
            }
        } catch (SQLException e) {
            System.out.println(""+e.getErrorCode());
            e.printStackTrace();
            return;
        }
        cmbColecciones.setSelectedIndex(posSeleccionada);
        colocarCampos((Coleccion) cmbColecciones.getSelectedItem());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JComboBox<Coleccion> cmbColecciones;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextArea txtaSinopsis;
    // End of variables declaration//GEN-END:variables
    private static DefaultComboBoxModel<Coleccion> modeloColecciones = new DefaultComboBoxModel<>();
}
